i_min <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$minPos[i] & gm_tad_dt$end >= famClust_dt$minPos[i])
stopifnot(length(i_min) == 1)
i_max <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$maxPos[i] & gm_tad_dt$end >= famClust_dt$maxPos[i])
stopifnot(length(i_max) == 1)
famClust_dt$nTADs <- foreach(i  = 1:nrow(famClust_dt), .combine='rbind') %dopar% {
i_min <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$minPos[i] & gm_tad_dt$end >= famClust_dt$minPos[i])
stopifnot(length(i_min) == 1)
i_max <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$maxPos[i] & gm_tad_dt$end >= famClust_dt$maxPos[i])
stopifnot(length(i_max) == 1)
nTADs <- i_max - i_min + 1
stopifnot(nTADs >= 1)
nTADs
}
require(foreach)
famClust_dt$nTADs <- foreach(i  = 1:nrow(famClust_dt), .combine='rbind') %dopar% {
i_min <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$minPos[i] & gm_tad_dt$end >= famClust_dt$minPos[i])
stopifnot(length(i_min) == 1)
i_max <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$maxPos[i] & gm_tad_dt$end >= famClust_dt$maxPos[i])
stopifnot(length(i_max) == 1)
nTADs <- i_max - i_min + 1
stopifnot(nTADs >= 1)
nTADs
}
i=6
famClust_dt$minPos[i]
max(gm_tad_dt$end[gm_tad_dt$chromo == famClust_dt$chromo[i] ])
famClust_dt$chromo[i]
gm_tad_dt <- gm_tad_dt[order(gm_tad_dt$chromo, gm_tad_dt$start, gm_tad_dt$end),]
gm_tad_dt$chromo <- as.character(gm_tad_dt$chromo)
famClust_dt$chromo <- as.character(famClust_dt$chromo)
famClust_dt <- famClust_dt[famClust_dt$chromo %in% gm_tad_dt$chromo,]
stopifnot(nrow(famClust_dt) > 0)
famClust_dt$nTADs <- foreach(i  = 1:nrow(famClust_dt), .combine='rbind') %dopar% {
i_min <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$minPos[i] & gm_tad_dt$end >= famClust_dt$minPos[i])
stopifnot(length(i_min) == 1)
i_max <- which(gm_tad_dt$chromo == famClust_dt$chromo[i] &
gm_tad_dt$start <= famClust_dt$maxPos[i] & gm_tad_dt$end >= famClust_dt$maxPos[i])
stopifnot(length(i_max) == 1)
nTADs <- i_max - i_min + 1
stopifnot(nTADs >= 1)
nTADs
}
head(famClust_dt)
famClust_dt$nTADs_ratio <- famClust_dt$nTADs/famClust_dt$nTADs$clusterSize
famClust_dt$nTADs_ratio <- famClust_dt$nTADs/famClust_dt$clusterSize
head(all_obs_dt)
all_obs_dt$chromo <- as.character(all_obs_dt$chromo)
all_obs_dt <- all_obs_dt[all_obs_dt$chromo %in% gm_tad_dt$chromo,]
stopifnot(nrow(all_obs_dt) > 0)
all_obs_dt$nTADs <- foreach(i  = 1:nrow(all_obs_dt), .combine='rbind') %dopar% {
i_min <- which(gm_tad_dt$chromo == all_obs_dt$chromo[i] &
gm_tad_dt$start <= all_obs_dt$minPos[i] & gm_tad_dt$end >= all_obs_dt$minPos[i])
stopifnot(length(i_min) == 1)
i_max <- which(gm_tad_dt$chromo == all_obs_dt$chromo[i] &
gm_tad_dt$start <= all_obs_dt$maxPos[i] & gm_tad_dt$end >= all_obs_dt$maxPos[i])
stopifnot(length(i_max) == 1)
nTADs <- i_max - i_min + 1
stopifnot(nTADs >= 1)
nTADs
}
all_obs_dt$nTADs_ratio <- all_obs_dt$nTADs/all_obs_dt$clusterSize
head(all_obs_dt)
plot(x=log10(all_obs_dt$minDist_CTCFclust),
y=all_obs_dt$nTADs_ratio)
setwd("/media/electron/mnt/etemp/marie/v2_Yuanlong_Cancer_HiC_data_TAD_DA")
source("../Cancer_HiC_data_TAD_DA/utils_fct.R")
setwd("~/Desktop")
densplot(x=log10(all_obs_dt$minDist_CTCFclust),
y=all_obs_dt$nTADs_ratio)
boxplot(nTADs~clusterSize, data=all_obs_dt)
gghistogram(all_obs_dt, x = "clusterSize", fill = "lightgray", binwidth=1, boundary=0,
add = "mean", rug = F) +
ggtitle("Distribution family cluster size", subtitle=paste0("-d = ", d_clustSize)) +
labs(x="cluster size", y="count")+
scale_y_continuous(breaks=scales::pretty_breaks(n = 10)) +
# scale_x_continuous(breaks=scales::pretty_breaks(n = 10))
scale_x_continuous(breaks=sort(unique(aggSize_clust_dt$clustSize)),
labels=sort(unique(aggSize_clust_dt$clustSize)))+
# scale_x_continuous(breaks=1:10,labels=sort(unique(aggSize_clust_dt$clustSize))) +
theme(
plot.subtitle = element_text(size=14, face="italic", hjust=0.5),
plot.title = element_text(size=16, face="bold", hjust=0.5),
axis.text = element_text(size=12)
)
d_famClust
gghistogram(all_obs_dt, x = "clusterSize", fill = "lightgray", binwidth=1, boundary=0,
add = "mean", rug = F) +
ggtitle("Distribution family cluster size", subtitle=paste0("-d = ", d_famClust)) +
labs(x="cluster size", y="count")+
scale_y_continuous(breaks=scales::pretty_breaks(n = 10)) +
# scale_x_continuous(breaks=scales::pretty_breaks(n = 10))
scale_x_continuous(breaks=sort(unique(aggSize_clust_dt$clustSize)),
labels=sort(unique(aggSize_clust_dt$clustSize)))+
# scale_x_continuous(breaks=1:10,labels=sort(unique(aggSize_clust_dt$clustSize))) +
theme(
plot.subtitle = element_text(size=14, face="italic", hjust=0.5),
plot.title = element_text(size=16, face="bold", hjust=0.5),
axis.text = element_text(size=12)
)
#> Warning: Using `bins = 30` by default. Pick better value with the argument `bins`.
gghistogram(all_obs_dt, x = "clusterSize", fill = "lightgray", binwidth=1, boundary=0,
add = "mean", rug = F) +
ggtitle("Distribution family cluster size", subtitle=paste0("-d = ", d_famClust)) +
labs(x="cluster size", y="count")+
scale_y_continuous(breaks=scales::pretty_breaks(n = 10)) +
# scale_x_continuous(breaks=scales::pretty_breaks(n = 10))
scale_x_continuous(breaks=sort(unique(all_obs_dt$clustSize)),
labels=sort(unique(all_obs_dt$clustSize)))+
# scale_x_continuous(breaks=1:10,labels=sort(unique(aggSize_clust_dt$clustSize))) +
theme(
plot.subtitle = element_text(size=14, face="italic", hjust=0.5),
plot.title = element_text(size=16, face="bold", hjust=0.5),
axis.text = element_text(size=12)
)
#> Warning: U
head(all_obs_dt)
setwd("/media/electron/mnt/etemp/marie/v2_Yuanlong_Cancer_HiC_data_TAD_DA")
ctcf_clust_dt <- get(load(file.path(inFolder, paste0("ctcf", d_ctcfClust, "_family", d_famClust), "agg_ctcf_cluster_dt.Rdata")))
head(ctcf_clust_dt)
setwd("~/Desktop")
stopifnot(!duplicated(ctcf_clust_dt$clusterID))
ctcf_clustSize <- setNames(ctcf_clust_dt$clusterSize, ctcf_clust_dt$clusterID)
all_ctcf_clustSize <- setNames(ctcf_clust_dt$clusterSize, ctcf_clust_dt$clusterID)
all_ctcf_clustLength <- setNames(ctcf_clust_dt$minPos-ctcf_clust_dt$maxPos+1, ctcf_clust_dt$clusterID)
all_ctcf_clustSize <- setNames(ctcf_clust_dt$clusterSize, paste0("CTCF_", ctcf_clust_dt$clusterID))
all_ctcf_clustLength <- setNames(ctcf_clust_dt$minPos-ctcf_clust_dt$maxPos+1, paste0("CTCF_", ctcf_clust_dt$clusterID))
stopifnot(all_obs_dt$closest_CTCFclust %in% names(all_ctcf_clustLength))
stopifnot(all_obs_dt$closest_CTCFclust %in% names(all_ctcf_clustSize))
all_obs_dt$closest_CTCFclust_length <- all_ctcf_clustLength[as.character(all_obs_dt$closest_CTCFclust)]
stopifnot(!is.na(all_obs_dt$closest_CTCFclust_length))
all_obs_dt$closest_CTCFclust_size <- all_ctcf_clustSize[as.character(all_obs_dt$closest_CTCFclust)]
stopifnot(!is.na(all_obs_dt$closest_CTCFclust_size))
myx <- log10(all_obs_dt$closest_CTCFclust_length)
myy <- all_obs_dt$nTADs_ratio
head(all_obs_dt)
all_ctcf_clustLength <- setNames(ctcf_clust_dt$maxPos-ctcf_clust_dt$minPos+1, paste0("CTCF_", ctcf_clust_dt$clusterID))
all_ctcf_clustLength <- setNames(ctcf_clust_dt$maxPos-ctcf_clust_dt$minPos+1, paste0("CTCF_", ctcf_clust_dt$clusterID))
stopifnot( all_ctcf_clustLength >= 0)
all_obs_dt$closest_CTCFclust_length <- all_ctcf_clustLength[as.character(all_obs_dt$closest_CTCFclust)]
stopifnot(!is.na(all_obs_dt$closest_CTCFclust_length))
myx <- log10(all_obs_dt$closest_CTCFclust_length)
myy <- all_obs_dt$nTADs_ratio
densplot(x=myx,
y=myy,
xlab ="closestCTCFclust_length [log10]",
ylab = "nTADs_ratio")
myx <- all_obs_dt$closest_CTCFclust_size
myy <- all_obs_dt$nTADs_ratio
densplot(x=myx,
y=myy,
xlab ="closestCTCFclust_length [log10]",
ylab = "nTADs_ratio")
myx <- all_obs_dt$closest_CTCFclust_size
myy <- all_obs_dt$nTADs
densplot(x=myx,
y=myy,
xlab ="closestCTCFclust_length [log10]",
ylab = "nTADs_ratio")
inFolder <- "CTCF_AND_FAMILY_CLUSTERS_RANDOMV2"
famClust_dt <- get(load(file.path(inFolder, paste0("ctcf", d_ctcfClust, "_family", d_famClust), "all_fams_agg_cluster_dt.Rdata")))
setwd("/media/electron/mnt/etemp/marie/v2_Yuanlong_Cancer_HiC_data_TAD_DA")
famClust_dt <- get(load(file.path(inFolder, paste0("ctcf", d_ctcfClust, "_family", d_famClust), "all_fams_agg_cluster_dt.Rdata")))
file.path(inFolder, paste0("ctcf", d_ctcfClust, "_family", d_famClust), "all_fams_agg_cluster_dt.Rdata")
infile= "CTCF_AND_FAMILY_CLUSTERS/ctcf4000_family260000/all_fams_agg_cluster_dt.Rdata"
famClust_dt2 <- get(load("CTCF_AND_FAMILY_CLUSTERS/ctcf4000_family260000/all_fams_agg_cluster_dt.Rdata"))
all.equal(famClust_dt,famClust_dt2)
setwd("~/Desktop")
g1 <- mtcars %>% ggplot(aes(disp, mpg, color = cyl))+
geom_point(size=2)+
scale_color_continuous(limits=c(0,8))+
ggtitle("mtcars: displacement")+
theme(title=element_text(size=8), text=element_text(size=12))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("rayshader")
install.packages("rayshader")
require(rayshader)
g1 %>% plot_gg(height=3, width=3.5, multicore=FALSE, pointcontract=0.7, soliddepth=-200)
install.packages("plot_Gg")
install.packages("plot_gg")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
require(rayshader)
g1 %>% plot_gg(height=3, width=3.5, multicore=FALSE, pointcontract=0.7, soliddepth=-200)
g1 <- mtcars %>% ggplot(aes(disp, mpg, color = cyl))+
geom_point(size=2)+
scale_color_continuous(limits=c(0,8))+
ggtitle("mtcars: displacement")+
theme(title=element_text(size=8), text=element_text(size=12))
g1 %>% plot_gg(height=3, width=3.5, multicore=FALSE, pointcontract=0.7, soliddepth=-200)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("tidyverse")
install.packages("tidyverse")
library(rayshader)
library(tidyverse)
# 3D DATA PLOT ----
# ggplot (2D visualization) - DS4B 101-R, Week 4
g1 <- mtcars %>%
ggplot(aes(disp, mpg, color = cyl)) +
geom_point(size=2) +
scale_color_continuous(limits=c(0,8)) +
ggtitle("mtcars: Displacement vs mpg vs # of cylinders") +
theme(title = element_text(size=8),
text = element_text(size=12))
# rayshader
g1 %>%
plot_gg(
height        = 3,
width         = 3.5,
multicore     = TRUE,
pointcontract = 0.7,
soliddepth    = -200
)
render_camera(zoom = 0.75, theta = -30, phi = 30)
render_snapshot(clear = FALSE)
x <- c(1,1,3,4,4,4,5,5,6)
rle(x)
x$lengths()
x@lengths()
rle(x)$lengths
rle(x)$values
options_default <-
list(
plots = TRUE,
font_face = "Comic Sans",
author = "No One In Particular"
)
options_patch <-
list(
author = "Me MySelf And I"
)
options_to_use <- modifyList(options_default, options_patch)
options_to_use
?all.vars
all.names(expression(sin(x+y)))
expression(sin(x+y))
all.vars(expression(sin(x+y)))
?all.vars
library(shiny)
library(shinyBS)
library(shinyjs)
library(graphics)
library(ggplot2)
library(ggpubr)
library(shiny)
library(shinythemes)
library(shinyBS)
library(shinyjs)
library(graphics)
runApp('tadcomp')
install.packages("BiocInstaller")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocInstaller")
install.packages("BiocManager")
runApp('tadcomp')
install.packages("BiocInstaller", repos="http://bioconductor.org/packages/2.13/bioc")
install.packages("BiocInstaller", repos="http://bioconductor.org/packages/2.13/bioc")
runApp('tadcomp')
runApp('tadcomp')
runApp('tadcomp')
runApp('tadcomp')
setwd("~/Desktop/tadcomp/scripts")
setwd("~/Desktop/tadcomp")
# OutFolder = paste0(OutFolder,"/")
color1 = "darkgoldenrod2"
color2 = "royalblue4"
color3 = "orangered3"
TadsFile = "data/struct_prot/chr19_TopDom_final_domains.txt"
resolution_kb = 10*10^3
# OutFolder = args[3] # Folder where results should be saved
# ChrSizes_file = args[4] # Tab-separated file containing the chromosome sizes. Each line should correspond to a chromosome (e.g. chr1   249250621)
ProteinPeaks_Folder = "data/struct_prot"
res_step = 5
proteins = c("CTCF", "RAD21", "SMC3")
Tads_chr <- read.table(TadsFile, quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
chr = as.numeric(substr(unique(Tads_chr$V1),4,nchar(unique(Tads_chr$V1))))
# ChrSizes = read.table(file = ChrSizes_file, quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
# ChrSize = as.numeric(ChrSizes[ChrSizes[,1]==paste0('chr',as.character(chr)),2])
ChrSize=171075000
###################
Final_Ratios_df <- data.frame(TadsFile = TadsFile, resolution_kb = NA, protein = NA, domains_ratio = NA)
Final_EnrichPeaks_df <- as.data.frame(matrix(nrow = 0, ncol = (as.integer(1000/res_step)+3) ))
colnames(Final_EnrichPeaks_df) <- c("TadsFile", "resolution_kb", "protein", as.character(c(1:as.integer(1000/res_step))))
Allprots_enrichs <- data.frame(row.names = c(1:as.integer(1000/res_step)))
for (protein in proteins)
{
Peaks <- read.table(paste0(ProteinPeaks_Folder, protein,'_peaks.bed'), quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
Peaks_chr <- Peaks[Peaks[,1]==paste0("chr",as.character(chr)),c(2,3)]
Enrich_df = data.frame(matrix(vector(), 0, as.integer(1000/res_step)))
Tad_edges <- unique(c(Tads_chr[,2], (Tads_chr[,3]+1)))
for (tad_edge in Tad_edges)
{
if (((tad_edge-500*1000)<0) | ((tad_edge+500*1000)>ChrSize)) next
Tad_surroundings <- seq(from = tad_edge-500*1000, to = tad_edge+500*1000, by = res_step*1000)
Peaks_tad <- Peaks_chr[Peaks_chr[,2]>=(tad_edge-500*1000) & Peaks_chr[,1]<=(tad_edge+500*1000),]
Vec_tad <- vector(mode = "numeric", length = as.integer(1000/res_step))
for (pt in 1:dim(Peaks_tad)[1])
{
query <- as.numeric(Peaks_tad[pt,])
query <- query[(query>Tad_surroundings[1]) & (query<Tad_surroundings[length(Tad_surroundings)]) ]
a <- hist(query, breaks = Tad_surroundings, plot = FALSE)
Vec_tad <- Vec_tad + as.numeric(a$counts>0)
}
Enrich_df <- rbind(Enrich_df, Vec_tad)
}
Ratio_tagged <- sum(as.numeric(rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])>0))/dim(Enrich_df)[1]
Allprots_enrichs[,protein] <- colMeans(Enrich_df)
Ratios_temp_df <- data.frame(TadsFile = TadsFile, resolution_kb = resolution_kb, protein = protein, domains_ratio = Ratio_tagged)
Final_Ratios_df <- rbind(Final_Ratios_df, Ratios_temp_df)
}
# OutFolder = args[3] # Folder where results should be saved
# ChrSizes_file = args[4] # Tab-separated file containing the chromosome sizes. Each line should correspond to a chromosome (e.g. chr1   249250621)
ProteinPeaks_Folder = "data/struct_prot/"
Allprots_enrichs <- data.frame(row.names = c(1:as.integer(1000/res_step)))
for (protein in proteins)
{
Peaks <- read.table(paste0(ProteinPeaks_Folder, protein,'_peaks.bed'), quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
Peaks_chr <- Peaks[Peaks[,1]==paste0("chr",as.character(chr)),c(2,3)]
Enrich_df = data.frame(matrix(vector(), 0, as.integer(1000/res_step)))
Tad_edges <- unique(c(Tads_chr[,2], (Tads_chr[,3]+1)))
for (tad_edge in Tad_edges)
{
if (((tad_edge-500*1000)<0) | ((tad_edge+500*1000)>ChrSize)) next
Tad_surroundings <- seq(from = tad_edge-500*1000, to = tad_edge+500*1000, by = res_step*1000)
Peaks_tad <- Peaks_chr[Peaks_chr[,2]>=(tad_edge-500*1000) & Peaks_chr[,1]<=(tad_edge+500*1000),]
Vec_tad <- vector(mode = "numeric", length = as.integer(1000/res_step))
for (pt in 1:dim(Peaks_tad)[1])
{
query <- as.numeric(Peaks_tad[pt,])
query <- query[(query>Tad_surroundings[1]) & (query<Tad_surroundings[length(Tad_surroundings)]) ]
a <- hist(query, breaks = Tad_surroundings, plot = FALSE)
Vec_tad <- Vec_tad + as.numeric(a$counts>0)
}
Enrich_df <- rbind(Enrich_df, Vec_tad)
}
Ratio_tagged <- sum(as.numeric(rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])>0))/dim(Enrich_df)[1]
Allprots_enrichs[,protein] <- colMeans(Enrich_df)
Ratios_temp_df <- data.frame(TadsFile = TadsFile, resolution_kb = resolution_kb, protein = protein, domains_ratio = Ratio_tagged)
Final_Ratios_df <- rbind(Final_Ratios_df, Ratios_temp_df)
}
Allprots_enrichs <- data.frame(row.names = c(1:as.integer(1000/res_step)))
for (protein in proteins)
{
Peaks <- read.table(paste0(ProteinPeaks_Folder, "chr19_", protein,'_peaks.bed'), quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
Peaks_chr <- Peaks[Peaks[,1]==paste0("chr",as.character(chr)),c(2,3)]
Enrich_df = data.frame(matrix(vector(), 0, as.integer(1000/res_step)))
Tad_edges <- unique(c(Tads_chr[,2], (Tads_chr[,3]+1)))
for (tad_edge in Tad_edges)
{
if (((tad_edge-500*1000)<0) | ((tad_edge+500*1000)>ChrSize)) next
Tad_surroundings <- seq(from = tad_edge-500*1000, to = tad_edge+500*1000, by = res_step*1000)
Peaks_tad <- Peaks_chr[Peaks_chr[,2]>=(tad_edge-500*1000) & Peaks_chr[,1]<=(tad_edge+500*1000),]
Vec_tad <- vector(mode = "numeric", length = as.integer(1000/res_step))
for (pt in 1:dim(Peaks_tad)[1])
{
query <- as.numeric(Peaks_tad[pt,])
query <- query[(query>Tad_surroundings[1]) & (query<Tad_surroundings[length(Tad_surroundings)]) ]
a <- hist(query, breaks = Tad_surroundings, plot = FALSE)
Vec_tad <- Vec_tad + as.numeric(a$counts>0)
}
Enrich_df <- rbind(Enrich_df, Vec_tad)
}
Ratio_tagged <- sum(as.numeric(rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])>0))/dim(Enrich_df)[1]
Allprots_enrichs[,protein] <- colMeans(Enrich_df)
Ratios_temp_df <- data.frame(TadsFile = TadsFile, resolution_kb = resolution_kb, protein = protein, domains_ratio = Ratio_tagged)
Final_Ratios_df <- rbind(Final_Ratios_df, Ratios_temp_df)
}
Allprots_enrichs <- data.frame(row.names = c(1:as.integer(1000/res_step)))
for (protein in proteins)
{
Peaks <- read.table(paste0(ProteinPeaks_Folder, "chr19_", protein,'_peaks.bed'), quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
Peaks_chr <- Peaks[Peaks[,1]==paste0("chr",as.character(chr)),c(2,3)]
Enrich_df = data.frame(matrix(vector(), 0, as.integer(1000/res_step)))
Tad_edges <- unique(c(Tads_chr[,2], (Tads_chr[,3]+1)))
for (tad_edge in Tad_edges)
{
if (((tad_edge-500*1000)<0) | ((tad_edge+500*1000)>ChrSize)) next
Tad_surroundings <- seq(from = tad_edge-500*1000, to = tad_edge+500*1000, by = res_step*1000)
Peaks_tad <- Peaks_chr[Peaks_chr[,2]>=(tad_edge-500*1000) & Peaks_chr[,1]<=(tad_edge+500*1000),]
Vec_tad <- vector(mode = "numeric", length = as.integer(1000/res_step))
for (pt in 1:dim(Peaks_tad)[1])
{
query <- as.numeric(Peaks_tad[pt,])
query <- query[(query>Tad_surroundings[1]) & (query<Tad_surroundings[length(Tad_surroundings)]) ]
a <- hist(query, breaks = Tad_surroundings, plot = FALSE)
Vec_tad <- Vec_tad + as.numeric(a$counts>0)
}
Enrich_df <- rbind(Enrich_df, Vec_tad)
}
Ratio_tagged <- sum(as.numeric(rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])>0))/dim(Enrich_df)[1]
Allprots_enrichs[,protein] <- colMeans(Enrich_df)
Ratios_temp_df <- data.frame(TadsFile = TadsFile, resolution_kb = resolution_kb, protein = protein, domains_ratio = Ratio_tagged)
Final_Ratios_df <- rbind(Final_Ratios_df, Ratios_temp_df)
}
head(Peaks)
source('~/Desktop/tadcomp/scripts/StructProt_EnrichBoundaries_script.R', echo=TRUE)
chr
head(Tads_chr)
Peaks <- read.table(paste0(ProteinPeaks_Folder, "chr19_", protein,'_peaks.bed'), quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
Peaks_chr <- Peaks[Peaks[,1]==paste0("chr",as.character(chr)),c(2,3)]
Enrich_df = data.frame(matrix(vector(), 0, as.integer(1000/res_step)))
Tad_edges <- unique(c(Tads_chr[,2], (Tads_chr[,3]+1)))
Tad_edges
tad_edge=20001
if (((tad_edge-500*1000)<0) | ((tad_edge+500*1000)>ChrSize)) next
Tad_surroundings <- seq(from = tad_edge-500*1000, to = tad_edge+500*1000, by = res_step*1000)
Peaks_tad <- Peaks_chr[Peaks_chr[,2]>=(tad_edge-500*1000) & Peaks_chr[,1]<=(tad_edge+500*1000),]
Vec_tad <- vector(mode = "numeric", length = as.integer(1000/res_step))
for (pt in 1:dim(Peaks_tad)[1])
{
query <- as.numeric(Peaks_tad[pt,])
query <- query[(query>Tad_surroundings[1]) & (query<Tad_surroundings[length(Tad_surroundings)]) ]
a <- hist(query, breaks = Tad_surroundings, plot = FALSE)
Vec_tad <- Vec_tad + as.numeric(a$counts>0)
}
Enrich_df <- rbind(Enrich_df, Vec_tad)
}
Ratio_tagged <- sum(as.numeric(rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])>0))/dim(Enrich_df)[1]
Allprots_enrichs[,protein] <- colMeans(Enrich_df)
Ratios_temp_df <- data.frame(TadsFile = TadsFile, resolution_kb = resolution_kb, protein = protein, domains_ratio = Ratio_tagged)
Final_Ratios_df <- rbind(Final_Ratios_df, Ratios_temp_df)
for (protein in proteins)
{
Peaks <- read.table(paste0(ProteinPeaks_Folder, "chr19_", protein,'_peaks.bed'), quote = '', stringsAsFactors=FALSE, sep = "\t", header = FALSE)
Peaks_chr <- Peaks[Peaks[,1]==paste0("chr",as.character(chr)),c(2,3)]
Enrich_df = data.frame(matrix(vector(), 0, as.integer(1000/res_step)))
Tad_edges <- unique(c(Tads_chr[,2], (Tads_chr[,3]+1)))
for (tad_edge in Tad_edges)
{
if (((tad_edge-500*1000)<0) | ((tad_edge+500*1000)>ChrSize)) next
Tad_surroundings <- seq(from = tad_edge-500*1000, to = tad_edge+500*1000, by = res_step*1000)
Peaks_tad <- Peaks_chr[Peaks_chr[,2]>=(tad_edge-500*1000) & Peaks_chr[,1]<=(tad_edge+500*1000),]
Vec_tad <- vector(mode = "numeric", length = as.integer(1000/res_step))
for (pt in 1:dim(Peaks_tad)[1])
{
query <- as.numeric(Peaks_tad[pt,])
query <- query[(query>Tad_surroundings[1]) & (query<Tad_surroundings[length(Tad_surroundings)]) ]
a <- hist(query, breaks = Tad_surroundings, plot = FALSE)
Vec_tad <- Vec_tad + as.numeric(a$counts>0)
}
Enrich_df <- rbind(Enrich_df, Vec_tad)
}
Ratio_tagged <- sum(as.numeric(rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])>0))/dim(Enrich_df)[1]
Allprots_enrichs[,protein] <- colMeans(Enrich_df)
Ratios_temp_df <- data.frame(TadsFile = TadsFile, resolution_kb = resolution_kb, protein = protein, domains_ratio = Ratio_tagged)
Final_Ratios_df <- rbind(Final_Ratios_df, Ratios_temp_df)
}
protein
tad_edge
if (((tad_edge-500*1000)<0) | ((tad_edge+500*1000)>ChrSize)) next
Tad_surroundings <- seq(from = tad_edge-500*1000, to = tad_edge+500*1000, by = res_step*1000)
Peaks_tad <- Peaks_chr[Peaks_chr[,2]>=(tad_edge-500*1000) & Peaks_chr[,1]<=(tad_edge+500*1000),]
Vec_tad <- vector(mode = "numeric", length = as.integer(1000/res_step))
pt=+
pt=1
query <- as.numeric(Peaks_tad[pt,])
query <- query[(query>Tad_surroundings[1]) & (query<Tad_surroundings[length(Tad_surroundings)]) ]
a <- hist(query, breaks = Tad_surroundings, plot = FALSE)
Vec_tad <- Vec_tad + as.numeric(a$counts>0)
ChrSize
Ratio_tagged <- sum(as.numeric(rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])>0))/dim(Enrich_df)[1]
Allprots_enrichs[,protein] <- colMeans(Enrich_df)
Ratios_temp_df <- data.frame(TadsFile = TadsFile, resolution_kb = resolution_kb, protein = protein, domains_ratio = Ratio_tagged)
Final_Ratios_df <- rbind(Final_Ratios_df, Ratios_temp_df)
resolution_kb
res_step
rowSums(Enrich_df[,c((length(Vec_tad)/2-resolution_kb/res_step+1):(length(Vec_tad)/2+resolution_kb/res_step))])
c((length(Vec_tad)/2-resolution_kb/res_step+1)
)
length(Vec_tad)
length(Vec_tad)/2
resolution_kb/res_step
source('~/Desktop/tadcomp/scripts/StructProt_EnrichBoundaries_script.R', echo=TRUE)
source('~/Desktop/tadcomp/scripts/StructProt_EnrichBoundaries_script.R', echo=TRUE)
setwd("~/Desktop/tadcomp")
runApp()
runApp()
?png
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
library(rsconnect)
install.packages("rsconnect")
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='comparetadpartitions', token='6AC698D07AC2287C4BD65BBC544A0164', secret='LZReqhuNpwqHffL+XByroukz7i1nQj9ryumnmO8j')
rsconnect::setAccountInfo(name='comparetadpartitions', token='6AC698D07AC2287C4BD65BBC544A0164', secret='LZReqhuNpwqHffL+XByroukz7i1nQj9ryumnmO8j')
deployApp()
deployApp()
deployApp()
library(BiocManager)
options(repos = BiocManager::repositories())
deployApp()
deployApp()
